clc; clearvars; close all;

%% -------------------------------------------------------------------------
% 1. Create an empty array.
% -------------------------------------------------------------------------
arr = array.create();

%% -------------------------------------------------------------------------
% 2. Place elements randomly.
% -------------------------------------------------------------------------
var = 1;
num_elements = 16;
for idx = 1:num_elements
    x = sqrt(var) * randn();
    y = sqrt(var) * randn();
    z = sqrt(var) * randn();
    arr.add_element(x,y,z);
end

%% -------------------------------------------------------------------------
% 3. View array in 3-D.
% -------------------------------------------------------------------------
arr.show_3d();

%% -------------------------------------------------------------------------
% 4. Get array response in some direction (az-el).
% -------------------------------------------------------------------------
az_deg = 15;
el_deg = 0;
az = az_deg * pi / 180;
el = el_deg * pi / 180;
a = arr.get_array_response(az,el)

%% -------------------------------------------------------------------------
% 5. Use conjugate beamforming.
% -------------------------------------------------------------------------
w = conj(a);
arr.set_weights(w);

%% -------------------------------------------------------------------------
% 6. Show array pattern and radiation pattern.
% -------------------------------------------------------------------------
arr.show_polar_array_pattern_azimuth();
arr.show_radiation_pattern([],'high');

